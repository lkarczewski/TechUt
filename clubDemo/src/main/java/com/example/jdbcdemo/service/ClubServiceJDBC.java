package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Club;

public class ClubServiceJDBC implements ClubService {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableClub = "CREATE TABLE Club(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, date_of_foundation date, is_champion boolean, assets double)";

	private PreparedStatement addClubStmt;
	private PreparedStatement deleteClubStmt;
	private PreparedStatement deleteAllClubsStmt;
	private PreparedStatement getAllClubsStmt;

	private Statement statement;

	public ClubServiceJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Club".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableClub);

			addClubStmt = connection.prepareStatement("INSERT INTO Club (name, date_of_foundation, is_champion, assets) VALUES (?, ?, ?, ?)");
			deleteClubStmt = connection.prepareStatement("DELETE FROM Club WHERE id=?");
			getAllClubsStmt = connection.prepareStatement("SELECT id, name, date_of_foundation, is_champion, assets FROM Club");
			deleteAllClubsStmt = connection.prepareStatement("DELETE FROM Club");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return this.connection;
	}

	@Override
	public void addClub(Club club) throws SQLException {
		addClubStmt.setString(1,club.getName());
		addClubStmt.setString(2,club.getDateOfFoundation());
		addClubStmt.setBoolean(3,club.isChampion());
		addClubStmt.setDouble(4,club.getAssets());
		addClubStmt.executeUpdate();
	}
	
	@Override
	public void deleteClub(Club club) throws SQLException {
        deleteClubStmt.setLong(1, club.getId());
        deleteClubStmt.executeUpdate();
	}

	@Override
	public List<Club> getAllClubs() {
		List<Club> clubs = new ArrayList<Club>();
		
		try {
			ResultSet rs = getAllClubsStmt.executeQuery();
			while(rs.next()) {
				Club c = new Club();
				c.setId(rs.getLong("id"));
				c.setName(rs.getString("name"));
				c.setDateOfFoundation(rs.getString("date_of_foundation"));
				c.setChampion(rs.getBoolean("is_champion"));
				c.setAssets(rs.getDouble("assets"));
				clubs.add(c);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return clubs;
	}

	@Override
	public void deleteAllClubs() {
		try {
			deleteAllClubsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
}
