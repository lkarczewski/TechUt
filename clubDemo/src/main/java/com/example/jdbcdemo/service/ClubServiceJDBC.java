package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Club;

public class ClubServiceJDBC implements ClubService {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableClub = "CREATE TABLE Club(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, date_of_foundation date, is_champion boolean, assets double)";

	private PreparedStatement addClubStmt;
	private PreparedStatement deleteClubStmt;
	private PreparedStatement deleteAllClubsStmt;
	private PreparedStatement getAllClubsStmt;

	private Statement statement;

	public ClubServiceJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Club".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableClub);

			addClubStmt = connection.prepareStatement("INSERT INTO Club (name, date_of_foundation, is_champion, assets) VALUES (?, ?, ?, ?)");
			deleteAllClubsStmt = connection.prepareStatement("DELETE FROM Club");
			getAllClubsStmt = connection.prepareStatement("SELECT id, name, yob FROM Person");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearPersons() {
		try {
			deleteAllClubsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addClub(Club person) {
		int count = 0;
		try {
			addClubStmt.setString(1, person.getName());
			addClubStmt.setInt(2, person.getYob());

			count = addClubStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Club> getAllClubs() {
		List<Club> persons = new ArrayList<Club>();

		try {
			ResultSet rs = getAllClubsStmt.executeQuery();

			while (rs.next()) {
				Club p = new Club();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}

	@Override
	public void addAllPersons(List<Club> persons) {

		try {
			connection.setAutoCommit(false);
			for (Club person : persons) {
				addClubStmt.setString(1, person.getName());
				addClubStmt.setInt(2, person.getYob());
				addClubStmt.executeUpdate();
			}
			connection.commit();
			
		} catch (SQLException exception) {
			
			try {
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
				//!!!! ALARM
			}
		}

	}

}
