package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Club;

public class ClubServiceJDBC implements ClubService {

	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private ResultSet rs;
	private Statement statement;

	private final String MY_TABLE_NAME = "Club";
	private final String CREATE_TABLE_SQL = "CREATE TABLE Club(id bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, name varchar(50) UNIQUE, date_of_foundation date, is_champion boolean, assets double)";
	private final String ADD_CLUB_SQL = "INSERT INTO Club (name, date_of_foundation, is_champion, assets) VALUES (?, ?, ?, ?)";
	private final String DELETE_CLUB_BY_ID_SQL ="DELETE FROM Club WHERE id=?";
	private final String DELETE_CLUB_BY_NAME_SQL ="DELETE FROM Club WHERE name=?";
	private final String DELETE_ALL_CLUBS_SQL = "DELETE FROM Club";
	private final String GET_CLUB_BY_ID_SQL = "SELECT id, name, date_of_foundation, is_champion, assets FROM Club WHERE id=?";
	private final String GET_CLUB_BY_NAME_SQL = "SELECT id, name, date_of_foundation, is_champion, assets FROM Club WHERE name=?";
	private final String GET_ALL_CLUBS_SQL = "SELECT id, name, date_of_foundation, is_champion, assets FROM Club";
	private String GET_CLUBS_BY_ASSETS_IN_RANGE_SQL = "SELECT name, date_of_foundation, is_champion, assets FROM Club WHERE assets >=? AND assets <= ?";
	private String GET_CLUBS_SORTED_BY_DATE_SQL = "SELECT id, name, date_of_foundation, is_champion, assets FROM Club ORDER BY date_of_foundation ";

	private PreparedStatement addClubStmt;
	private PreparedStatement deleteClubByIdStmt;
	private PreparedStatement deleteClubByNameStmt;
	private PreparedStatement deleteAllClubsStmt;
	private PreparedStatement getClubByIdStmt;
	private PreparedStatement getClubByNameStmt;
	private PreparedStatement getAllClubsStmt;
	private PreparedStatement getClubsByAssetsInRangeStmt;
	//private PreparedStatement getClubsSortedByDateStmt;

	public ClubServiceJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if (MY_TABLE_NAME.equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_SQL);

			addClubStmt = connection.prepareStatement(ADD_CLUB_SQL);
			deleteClubByIdStmt = connection.prepareStatement(DELETE_CLUB_BY_ID_SQL);
			deleteClubByNameStmt = connection.prepareStatement(DELETE_CLUB_BY_NAME_SQL);
			deleteAllClubsStmt = connection.prepareStatement(DELETE_ALL_CLUBS_SQL);
			getClubByIdStmt = connection.prepareStatement(GET_CLUB_BY_ID_SQL);
			getClubByNameStmt = connection.prepareStatement(GET_CLUB_BY_NAME_SQL);
			getAllClubsStmt = connection.prepareStatement(GET_ALL_CLUBS_SQL);
			//getClubsByAssetsInRangeStmt = connection.prepareStatement(GET_CLUBS_BY_ASSETS_IN_RANGE_SQL);
			//getClubsSortedByDateStmt = connection.prepareStatement(GET_CLUBS_SORTED_BY_DATE_SQL);
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean addClub(Club club) {
		try {
			addClubStmt.setString(1, club.getName());
			addClubStmt.setString(2, club.getDateOfFoundation());
			addClubStmt.setBoolean(3 ,club.isChampion());
			addClubStmt.setDouble(4, club.getAssets());
			addClubStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		
	}
	
	@Override
	public boolean addClubs(List<Club> clubs) {
		try {
			connection.setAutoCommit(false);
			for(Club club : clubs) {
				if(!addClub(club))
					throw new SQLException();
			}
				connection.commit();	
				return true;
			} catch (SQLException exception) {
				try {
					exception.printStackTrace();
					connection.rollback();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return false;
		}
	}

	@Override
	public boolean deleteClubById(long id) {
		try {
			deleteClubByIdStmt.setLong(1, id);
			deleteClubByIdStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean deleteClubByName(String name) {
		try {
			deleteClubByNameStmt.setString(1, name);
			deleteClubByNameStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean deleteAllClubs() {
		try {
			deleteAllClubsStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean deleteClubList(List<Club> clubs) {
		try {
			connection.setAutoCommit(false);
			for (Club club : clubs) {
				if(!deleteClubByName(club.getName()))
					throw new SQLException();
			}
			connection.commit();
			return true;

		} catch (SQLException exception) {
			try {
				exception.printStackTrace();
				connection.rollback();

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return false;
		}
	}

	@Override
	public Club getClubById(long id) {
		try {
			getClubByIdStmt.setLong(1, id);
			rs = getClubByIdStmt.executeQuery();
			if (rs.next()) {
				return new Club(rs.getString(2), rs.getString(3),rs.getBoolean(4), rs.getDouble(5));
			}
			else return null;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Club getClubByName(String name) {
		try {
			getClubByNameStmt.setString(1, name);
			rs = getClubByNameStmt.executeQuery();
			if (rs.next()) {
				return new Club(rs.getString(2), rs.getString(3),rs.getBoolean(4), rs.getDouble(5));
			}
			else return null;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Club> getAllClubs() {
		List<Club> result = new ArrayList<>();

		try {
			rs = getAllClubsStmt.executeQuery();

			while (rs.next()) {
				result.add(new Club(rs.getString(2), rs.getString(3), rs.getBoolean(4), rs.getDouble(5)));
			}

			return result;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Club> getClubsByAssetsInRange(double min, double max, String order) {
		List<Club> result = new ArrayList<>();

		try {
			getClubsByAssetsInRangeStmt.setDouble(1, min);
			getClubsByAssetsInRangeStmt.setDouble(2, max);
			rs = getClubsByAssetsInRangeStmt.executeQuery();

			while(rs.next()) {
				result.add(new Club(rs.getString(1), rs.getString(2), rs.getBoolean(3), rs.getDouble(4)));
			}
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public List<Club> getClubsSortedByDate(String order) {
		List<Club> result = new ArrayList<>();
		Statement getClubsSortedByDateStmt;

		try {
			rs = statement.executeQuery(GET_CLUBS_SORTED_BY_DATE_SQL + order);

			while(rs.next()) {
				result.add(new Club(rs.getString(1), rs.getString(2), rs.getBoolean(3), rs.getDouble(4)));
			}
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}
}

