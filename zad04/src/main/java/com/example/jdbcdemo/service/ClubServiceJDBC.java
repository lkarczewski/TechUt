package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Club;

public class ClubServiceJDBC implements ClubService {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private final String createTableClub = "CREATE TABLE Club(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, date_of_foundation date, is_champion boolean, assets double)";
	
	private PreparedStatement addClubStmt;
	private PreparedStatement deleteClubStmt;
	private PreparedStatement deleteClubsStmt;
	private PreparedStatement getAllClubsStmt;
	private PreparedStatement getClubByIdStmt;
	private PreparedStatement getClubByNameStmt;
	private PreparedStatement deleteClubByIdStmt;
	private PreparedStatement deleteClubByNameStmt;
	private PreparedStatement getClubsAssetsStmt;

	private Statement statement;

	public ClubServiceJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Club".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableClub);

			addClubStmt = connection.prepareStatement("INSERT INTO Club (name, date_of_foundation, is_champion, assets) VALUES (?, ?, ?, ?)");
			deleteClubStmt = connection.prepareStatement("DELETE FROM Club WHERE id=?");
			getAllClubsStmt = connection.prepareStatement("SELECT id, name, date_of_foundation, is_champion, assets FROM Club");
			deleteClubsStmt = connection.prepareStatement("DELETE FROM Club");
			getClubByIdStmt = connection.prepareStatement("SELECT id, name, date_of_foundation, is_champion, assets FROM Club WHERE id=?");
			getClubByNameStmt = connection.prepareStatement("SELECT id, name, date_of_foundation, is_champion, assets FROM Club WHERE name=?");
			deleteClubByIdStmt = connection.prepareStatement("DELETE FROM Club WHERE id=?");
			deleteClubByNameStmt = connection.prepareStatement("DELETE FROM Club WHERE name=?");
			getClubsAssetsStmt = connection.prepareStatement("SELECT id, name, date_of_foundation, is_champion, assets FROM Club WHERE assets >=? AND assets <= ?");
			

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return this.connection;
	}

	@Override
	public boolean addClub(Club club) throws SQLException {
		try {
			addClubStmt.setString(1,club.getName());
			addClubStmt.setString(2,club.getDateOfFoundation());
			addClubStmt.setBoolean(3,club.isChampion());
			addClubStmt.setDouble(4,club.getAssets());
			addClubStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		
	}
	
	@Override
	public boolean addClubs(List<Club> clubs) {
		try {
			connection.setAutoCommit(false);
			for(Club club : clubs) {
				if(!addClub(club))
					throw new SQLException();
			}
				connection.commit();	
				return true;
			} catch (SQLException exception) {
				try {
					exception.printStackTrace();
					connection.rollback();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return false;
		}
	}
	
	@Override
	public boolean deleteClub(Club club) throws SQLException {
		try {
			deleteClubStmt.setLong(1, club.getId());
	        deleteClubStmt.executeUpdate();
	        return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
        
	}

	@Override
	public List<Club> getAllClubs() {
		List<Club> clubs = new ArrayList<Club>();
		
		try {
			ResultSet rs = getAllClubsStmt.executeQuery();
			while(rs.next()) {
				Club c = new Club();
				c.setId(rs.getLong("id"));
				c.setName(rs.getString("name"));
				c.setDateOfFoundation(rs.getString("date_of_foundation"));
				c.setChampion(rs.getBoolean("is_champion"));
				c.setAssets(rs.getDouble("assets"));
				clubs.add(c);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return clubs;
	}
	
	@Override
	public boolean deleteClubs(List<Club> clubs) {
		// TODO Auto-generated method stub
		try {
			connection.setAutoCommit(false);
			for (Club club : clubs) {
				if(!deleteClubByName(club.getName()))
					throw new SQLException();
			}
			connection.commit();
			return true;
		} catch (SQLException exception) {
			try {
				exception.printStackTrace();
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return false;
		}
	}

	@Override
	public boolean deleteClubs() {
		try {
			deleteClubsStmt.executeUpdate();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	@Override
	public boolean selectClubById(long id) {
		try {
			getClubByIdStmt.setLong(1, id);
			getClubByIdStmt.execute();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	@Override
	public boolean selectClubByName(String name) {
		try {
			getClubByIdStmt.setString(1, name);
			getClubByIdStmt.execute();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	@Override
    public Club getClubById(long id) {
        try {
            getClubByIdStmt.setLong(1, id);
            ResultSet rs = getClubByIdStmt.executeQuery();
            if (rs.next())
                return new Club(rs.getString(2), rs.getString(3), rs.getBoolean(4), rs.getDouble(5));
            else return null;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
	}
	
	@Override
    public Club getClubByName(String name) {
        try {
            getClubByIdStmt.setString(1, name);
            ResultSet rs = getClubByNameStmt.executeQuery();
            if (rs.next())
                return new Club(rs.getString(2), rs.getString(3), rs.getBoolean(4), rs.getDouble(5));
            else return null;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
	}
	
	@Override 
	public boolean deleteClubById(long id) {
		try {
			deleteClubByIdStmt.setLong(1, id);
			deleteClubByIdStmt.executeQuery();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	@Override 
	public boolean deleteClubByName(String name) {
		try {
			deleteClubByNameStmt.setString(1, name);
			deleteClubByNameStmt.executeQuery();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<Club> getClubsAssets(double min, double max) {
		// TODO Auto-generated method stub
		List<Club> clubsAssets = new ArrayList<>();
		try {
			getClubsAssetsStmt.setDouble(1, min);
			getClubsAssetsStmt.setDouble(2, max);
			ResultSet rs = getClubsAssetsStmt.executeQuery();
			while(rs.next()) {
				clubsAssets.add(new Club(rs.getString(2), rs.getString(3), rs.getBoolean(4), rs.getDouble(5)));
			}
			return clubsAssets;
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
	}
}
