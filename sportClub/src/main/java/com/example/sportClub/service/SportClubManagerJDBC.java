package com.example.sportClub.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Person;
import com.example.sportClub.domain.SportClub;

public class SportClubManagerJDBC implements SportClubManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableSportClub = "CREATE TABLE SportClub(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, dof date, isChampion boolean, assets double)";
	
	private PreparedStatement addSportClubStmt;
	private PreparedStatement deleteSportClubByIdStmt;
	private PreparedStatement deleteAllSportClubsStmt;
	private PreparedStatement getSportClubByNameStmt;
	private PreparedStatement getAllSportClubsStmt;
	
	private Statement statement;
	
	public SportClubManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("SportClub".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableSportClub);

			addSportClubStmt = connection.prepareStatement("INSERT INTO SportClub (name, dof, isChampion, assets) VALUES (?, ?, ?, ?)");
			deleteSportClubByIdStmt = connection.prepareStatement("DELETE FROM SportClub WHERE id=?");
			deleteAllSportClubsStmt = connection.prepareStatement("DELETE FROM SportClub");
			getAllSportClubsStmt = connection.prepareStatement("SELECT id, name, dof, isChampion, assets FROM SportClub");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public int addSportClub(SportClub sportClub) {
		
		int count = 0;
		
		try {
			addSportClubStmt.setString(1, sportClub.getName());
			addSportClubStmt.setDate(2, sportClub.getDof());
			addSportClubStmt.setBoolean(3, sportClub.isChampion());
			addSportClubStmt.setDouble(4, sportClub.getAssets());
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteSportClubById(long id) {
		int count = 0;
		
		try {
			deleteSportClubByIdStmt.setLong(1, id);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int getSportClubByName(String name) {
		// TODO Auto-generated method stub
		return 0;
	}

	public void deleteAllSportClubs() {
		try {
			deleteAllSportClubsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<SportClub> getAllSportClubs() {
		List<SportClub> sportClubs = new ArrayList<SportClub>();

		try {
			ResultSet rs = getAllSportClubsStmt.executeQuery();

			while (rs.next()) {
				SportClub s = new SportClub();
				s.setId(rs.getInt("id"));
				s.setName(rs.getString("name"));
				s.setDof(rs.getDate("dof"));
				s.setChampion(rs.getBoolean("isChampion"));
				s.setAssets(rs.getDouble("assets"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return sportClubs;
	}
}
